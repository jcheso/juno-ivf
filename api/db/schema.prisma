datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

model User {
  id                  String      @id @default(uuid())
  email               String      @unique
  firstName           String
  lastName            String
  hashedPassword      String
  salt                String
  resetToken          String?
  resetTokenExpiresAt DateTime?
  roles               String      @default("admin")
  patients            Patient[]
  clinic              Clinic      @relation(fields: [clinicId], references: [id])
  clinicId            String
  createdAt           DateTime    @default(now())
  treatments          Treatment[]
}

model Patient {
  id                   String          @id @default(uuid())
  firstName            String
  lastName             String
  phone                String
  email                String          @unique
  clinic               Clinic          @relation(fields: [clinicId], references: [id])
  clinicId             String
  clinician            User            @relation(fields: [clinicianId], references: [id])
  clinicianId          String
  dob                  DateTime
  address              String
  city                 String
  county               String
  country              String
  postcode             String
  medicalHistory       String?
  surgicalHistory      String?
  medications          String?
  infertilityDiagnosis String?
  createdAt            DateTime        @default(now())
  treatments           Treatment[]
  follicleCount        FollicleCount[]
}

model Clinic {
  id         String    @id @default(uuid())
  name       String
  patients   Patient[]
  clinicians User[]
}

model WaitList {
  id        String   @id @default(uuid())
  email     String   @unique
  createdAt DateTime @default(now())
}

model Treatment {
  id                  String          @id @default(uuid())
  clinician           User            @relation(fields: [clinicianId], references: [id])
  clinicianId         String
  patient             Patient         @relation(fields: [patientId], references: [id], onDelete: Cascade)
  patientId           String
  startDate           DateTime
  endDate             DateTime?
  wasSuccessful       Boolean?
  isActive            Boolean         @default(true)
  createdAt           DateTime        @default(now())
  count               Int             @default(0)
  FollicleCount       FollicleCount[]
  acfId               String?
  ageAtTreatmentStart Int?
}

model FollicleCount {
  id          String    @id @default(uuid())
  day         Int
  createdAt   DateTime  @default(now())
  date        DateTime  @default(now())
  patientId   String
  Patient     Patient   @relation(fields: [patientId], references: [id], onDelete: Cascade)
  treatmentId String
  Treatment   Treatment @relation(fields: [treatmentId], references: [id], onDelete: Cascade)
  left        String
  right       String
}

model PredictEggsModel {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  modelUrl    String
  shardUrl    String
  imgUrl      String?
  imgDesc     String?
  description String
  userId      String
  version     String
}
